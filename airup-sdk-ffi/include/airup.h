#pragma once

#include <stddef.h>
#include <stdint.h>

#ifndef _AIRUP_H
#define _AIRUP_H

#define AIRUP_EIO 1

#define AIRUP_IPC_TYPE_STRING 1


/// @brief An error generated by Airup SDK functions
struct AirupSDK_Error {
    uint32_t code;
    char *message;
    void *info;
};

/// @brief A connection in the Airup IPC protocol
typedef struct AirupSDK_Connection AirupSDK_Connection;

/// @brief A request object in the Airup IPC protocol
typedef struct AirupSDK_Request AirupSDK_Request;

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/// @brief Get value of Airup SDK private thread-local variable `LAST_ERROR`, which is used by Airup SDK functions to indicates errors.
/// @return Value of Airup SDK private thread-local variable `LAST_ERROR`
struct AirupSDK_Error AirupSDK_GetLastError(void);

/// @brief Open a new connection to the given path in the Airup IPC protocol
/// @param path Path of target IPC socket
/// @return The connection opened, or `NULL` if an error occured.
AirupSDK_Connection *AirupSDK_OpenConnection(const char *path);

/// @brief Close a connection opened by previous call to `AirupSDK_OpenConnection`
/// @param conn The connection to close
void AirupSDK_CloseConnection(AirupSDK_Connection *conn);

/// @brief Send a raw message to the given connection
/// @param conn The connection to send to
/// @param data Pointer to the message body
/// @param len Length of the message
/// @return Returns `0` if success, or `-1` if an error occured
int AirupSDK_SendBytes(void *conn, unsigned char *data, size_t len);

/// @brief Receives a raw message from the given connection
/// @warning The pointer written to `*data` should be later released by calling `free()` to prevent memory leakage
/// @param conn The connection to receive from
/// @param data Output parameter to message buffer pointer
/// @param len Output parameter to message length 
/// @return Returns `0` if success, or `-1` if an error occured
int AirupSDK_RecvBytes(void *conn, unsigned char **data, size_t *len);

/// @brief Get preferred IPC path, usually taken from `AIRUP_SOCK` environment or from built-in manifest
/// @return Preferred IPC path
char *AirupSDK_PreferredIpcPath(void);

/// @brief Allocates a new `AirupSDK_Request` object for the given method
/// @return Allocated `AirupSDK_Request` object
AirupSDK_Request *AirupSDK_AllocateRequest(const char *method);

/// @brief Destroys a new `AirupSDK_Request` object for the given method
/// @param req The request object to destroy
void AirupSDK_DeallocateRequest(AirupSDK_Request *req);

/// @brief Puts a new parameter to an `AirupSDK_Request` object
/// @warning It's undefined behavior if `ty` is invalid
/// @param req The object to put parameter to
/// @param ty Type of the value
/// @param val Pointer to the value
void AirupSDK_PutRequestParameter(AirupSDK_Request *req, int ty, void *val);

/// @brief Serialize the given request to JSON string
/// @warning The returned pointer should be later released by calling `free()` to prevent memory leakage
/// @return Returns JSON-serialized request string
char *AirupSDK_SerializeRequest(const AirupSDK_Request *req);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _AIRUP_H */